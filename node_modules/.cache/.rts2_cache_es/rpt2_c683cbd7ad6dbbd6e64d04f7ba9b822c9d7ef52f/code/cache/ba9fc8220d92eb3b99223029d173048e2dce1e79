{"code":"export default () => {\r\n    const allHandlers = new Map();\r\n    const on = (type, handler) => {\r\n        let handlers = allHandlers.get(type);\r\n        if (handlers) {\r\n            handlers.push(handler);\r\n        }\r\n        else {\r\n            allHandlers.set(type, [handler]);\r\n        }\r\n    };\r\n    let eventHandler = {\r\n        on,\r\n        once: (type, handler) => {\r\n            on(`_:${type}`, (event) => {\r\n                handler(event);\r\n                allHandlers.set(`_:${type}`, []);\r\n            });\r\n        },\r\n        off: (type, handler) => {\r\n            let handlers = allHandlers.get(type);\r\n            if (handlers) {\r\n                if (handler) {\r\n                    handlers.splice(handlers.indexOf(handler) >>> 0, 1);\r\n                }\r\n                else {\r\n                    allHandlers.set(type, []);\r\n                }\r\n            }\r\n        },\r\n        emit: (type, evt) => {\r\n            let handlers = [...allHandlers.get(type), ...allHandlers.get('*'), ...allHandlers.get(`_:${type}`)];\r\n            if (handlers) {\r\n                handlers\r\n                    .slice()\r\n                    .map((handler) => {\r\n                    handler(evt);\r\n                });\r\n            }\r\n        }\r\n    };\r\n    return eventHandler;\r\n};\r\n","references":[],"dts":{"name":"/Users/brayden/Documents/hive/dist/index.d.ts","writeByteOrderMark":false,"text":"declare type EventType = string;\r\ndeclare type Handler<T = unknown> = (event: T) => void;\r\ndeclare const _default: <Events extends Record<string, unknown>>() => {\r\n    on: (type: EventType, handler: Handler<Events[keyof Events]>) => void;\r\n    once: (type: EventType, handler: Handler<Events[keyof Events]>) => void;\r\n    off: (type: EventType, handler?: Handler<Events[keyof Events]> | undefined) => void;\r\n    emit: (type: EventType, evt?: Events[string] | undefined) => void;\r\n};\r\nexport default _default;\r\n"}}
