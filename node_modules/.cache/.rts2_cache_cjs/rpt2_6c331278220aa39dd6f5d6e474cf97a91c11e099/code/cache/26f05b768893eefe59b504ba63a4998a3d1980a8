{"code":"export class NanoEvent {\r\n    listeners;\r\n    constructor(listeners = new Map()) {\r\n        this.listeners = listeners;\r\n    }\r\n    ;\r\n    on(type, handler) {\r\n        let handlers = this.listeners.get(type);\r\n        if (handlers) {\r\n            handlers.push(handler);\r\n        }\r\n        else {\r\n            this.listeners.set(type, [handler]);\r\n        }\r\n    }\r\n    once(type, handler) {\r\n        this.on(`once:${type}`, (...event) => {\r\n            handler(event);\r\n            this.listeners.set(`once:${type}`, []);\r\n        });\r\n    }\r\n    off(type, handler) {\r\n        let handlers = this.listeners.get(type);\r\n        if (handlers) {\r\n            if (handler) {\r\n                handlers.splice(handlers.indexOf(handler) >>> 0, 1);\r\n            }\r\n            else {\r\n                this.listeners.set(type, []);\r\n            }\r\n        }\r\n    }\r\n    emit(type, ...events) {\r\n        let handlers = [...this.listeners.get(type), ...this.listeners.get('*'), ...this.listeners.get(`once:${type}`)];\r\n        if (handlers) {\r\n            handlers\r\n                .slice()\r\n                .map((handler) => {\r\n                handler(...events);\r\n            });\r\n        }\r\n    }\r\n}\r\nexport default new NanoEvent();\r\n","references":[],"dts":{"name":"/Users/brayden/Documents/hive/dist/index.d.ts","writeByteOrderMark":false,"text":"declare type Key = string;\r\ndeclare type Handler = (...event: unknown[]) => void;\r\nexport declare class NanoEvent {\r\n    private listeners;\r\n    constructor(listeners?: Map<any, any>);\r\n    on(type: Key, handler: Handler): void;\r\n    once(type: Key, handler: Handler): void;\r\n    off(type: Key, handler?: Handler): void;\r\n    emit(type: Key, ...events: unknown[]): void;\r\n}\r\ndeclare const _default: NanoEvent;\r\nexport default _default;\r\n"}}
