{"code":"export default () => {\r\n    const allHandlers = new Map();\r\n    return {\r\n        allHandlers,\r\n        on: (type, handler) => {\r\n            let handlers = allHandlers.get(type);\r\n            if (handlers) {\r\n                handlers.push(handler);\r\n            }\r\n            else {\r\n                allHandlers.set(type, [handler]);\r\n            }\r\n        },\r\n        once: (type) => { },\r\n        off: (type) => { },\r\n        emit: (type, evt) => {\r\n            let handlers = [...allHandlers.get(type), ...allHandlers.get('*')];\r\n            if (handlers) {\r\n                handlers\r\n                    .slice()\r\n                    .map((handler) => {\r\n                    handler(evt);\r\n                });\r\n            }\r\n        }\r\n    };\r\n};\r\n//# sourceMappingURL=index.js.map","references":[],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"AAMA,eAAe,GAA8C,EAAE;IAE3D,MAAM,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;IAE9B,OAAO;QACH,WAAW;QACX,EAAE,EAAE,CAAC,IAAe,EAAE,OAAsC,EAAE,EAAE;YAC5D,IAAI,QAAQ,GAAoC,WAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACvE,IAAI,QAAQ,EAAE;gBACV,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAC1B;iBAAM;gBACH,WAAY,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,OAAO,CAAsC,CAAC,CAAA;aACzE;QACL,CAAC;QACD,IAAI,EAAE,CAAC,IAAe,EAAE,EAAE,GAAG,CAAC;QAC9B,GAAG,EAAE,CAAC,IAAe,EAAE,EAAE,GAAG,CAAC;QAC7B,IAAI,EAAE,CAAC,IAAe,EAAE,GAAuB,EAAE,EAAE;YAC/C,IAAI,QAAQ,GAAG,CAAC,GAAG,WAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,WAAY,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;YACpE,IAAI,QAAQ,EAAE;gBACT,QAA8C;qBAC1C,KAAK,EAAE;qBACP,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;oBACb,OAAO,CAAC,GAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAA;aACT;QACL,CAAC;KACJ,CAAA;AACL,CAAC,CAAA\"}","dts":{"name":"/Users/brayden/Documents/hive/index.d.ts","writeByteOrderMark":false,"text":"declare type EventType = string | symbol;\r\ndeclare type Handler<T = unknown> = (event: T) => void;\r\ndeclare const _default: <Events extends Record<EventType, unknown>>() => {\r\n    allHandlers: Map<any, any>;\r\n    on: (type: EventType, handler: Handler<Events[keyof Events]>) => void;\r\n    once: (type: EventType) => void;\r\n    off: (type: EventType) => void;\r\n    emit: (type: EventType, evt?: Events[EventType] | undefined) => void;\r\n};\r\nexport default _default;\r\n"}}
